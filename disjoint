
#include <stdio.h>
#include <stdlib.h>
 
#define SIZE 10  // Maximum number of elements
 
int parent[SIZE];  // Array to store the parent of each element
int rank[SIZE];    // Array to store the rank of each element
 
// Function to create sets
void createSet(int n) {
    for (int i = 0; i < n; i++) {
        parent[i] = -1;  // Each element is its own parent, represented by -1
        rank[i] = 0;     // Initial rank of each set is 0
    }
    printf("Disjoint set with %d elements created successfully.\n", n);
}
 
// Find operation with path compression
int find(int x) {
    if (parent[x] == -1) {
        return x;  // If parent is -1, the element is the root
    }
    parent[x] = find(parent[x]);  // Path compression
    return parent[x];
}
 
// Union operation with union by rank
void unionSets(int x, int y) {
    int rootX = find(x);
    int rootY = find(y);
 
    if (rootX != rootY) {
        // Attach smaller rank tree under the larger rank tree
        if (rank[rootX] > rank[rootY]) {
            parent[rootY] = rootX;
        } else if (rank[rootX] < rank[rootY]) {
            parent[rootX] = rootY;
        } else {
            parent[rootY] = rootX;
            rank[rootX]++;  // Increase rank if both trees have the same rank
        }
        printf("Union of %d and %d performed successfully.\n", x, y);
    } else {
        printf("Elements %d and %d are already in the same set.\n", x, y);
    }
}
 
// Function to display the parent and rank arrays
void displaySets(int n) {
    printf("Element: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", i);
    }
    printf("\nParent : ");
    for (int i = 0; i < n; i++) {
        printf("%d ", parent[i]);
    }
    printf("\nRank   : ");
    for (int i = 0; i < n; i++) {
        printf("%d ", rank[i]);
    }
    printf("\n");
}
 
// Main function
int main() {
    int choice, n, x, y;
 
    printf("Enter the number of elements in the disjoint set (max %d): ", SIZE);
    scanf("%d", &n);
    if (n > SIZE || n <= 0) {
        printf("Invalid number of elements.\n");
        return 1;
    }
 
    createSet(n);
 
    do {
        printf("\nMenu:\n");
        printf("1. Union\n");
        printf("2. Find\n");
        printf("3. Display Sets\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
 
        switch (choice) {
        case 1:  // Union operation
            printf("Enter two elements to union (0 to %d): ", n - 1);
            scanf("%d %d", &x, &y);
            if (x >= 0 && x < n && y >= 0 && y < n) {
                unionSets(x, y);
            } else {
                printf("Invalid elements. Please try again.\n");
            }
            break;
 
        case 2:  // Find operation
            printf("Enter an element to find its set representative (0 to %d): ", n - 1);
            scanf("%d", &x);
            if (x >= 0 && x < n) {
                int representative = find(x);
                printf("Representative of %d is %d.\n", x, representative);
            } else {
                printf("Invalid element. Please try again.\n");
            }
            break;
 
        case 3:  // Display sets
            displaySets(n);
            break;
 
        case 4:  // Exit
            printf("Exiting the program.\n");
            break;
 
        default:
            printf("Invalid choice. Please try again.\n");
        }
    } while (choice != 4);
 
    return 0;
}
